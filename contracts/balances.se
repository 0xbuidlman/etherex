# balances.se -- Ethereum contract
#
# Copyright (c) 2014 EtherEx
#
# This software may be modified and distributed under the terms
# of the MIT license.  See the LICENSE file for details.

#
# Balances
#

init:
    # c3D definitions
    contract.storage[10] = 0x88554646BA # c3D linked list
    contract.storage[15] = msg.sender # Owner of this c3D contract
    contract.storage[16] = msg.sender # Creator of this c3D contract
    contract.storage[17] = block.timestamp # TimeStamp this c3D contract was created

code:
    # Basic gas check
    if tx.gas < 1000:
        return(0) // "Insufficient gas"

    # Get our status
    status = contract.storage[1]

    # Get reference to exchange
    exchange = contract.storage[15]

    # Logging
    contract.storage[20] = msg.datasize
    contract.storage[21] = tx.gas
    contract.storage[22] = block.timestamp

    # Operate only if initialized
    if status == 1: // "Running contract..."

        balance = contract.storage[msg.sender] // "Balance of %s: %d" % (msg.sender, balance)

        if msg.value > 0: // "Transfering value to ETH: %s" % msg.value
            balance = balance + msg.value
            contract.storage[msg.sender] = balance

        # Get our inputs
        to = msg.data[0]
        value = msg.data[1]

        # Check our inputs for transfers
        if msg.datasize < 3:
            if to < 100:
                return(2) // "msg.data[0] out of bounds: %s" % to
            if value < 1:
                return(3) // "msg.data[1] out of bounds: %s" % value

            # Check for sufficient funds and adjust balances
            if balance < value:
                return(4) // "Insufficient funds, %s has %d needs %d" % (msg.sender, balance, value)

            elif value > 0: // "Adjusting values by %d" % value
                balance = contract.storage[msg.sender] - value
                contract.storage[msg.sender] = balance
                contract.storage[to] = contract.storage[to] + value

        # Operations
        else:

            # Check balance
            if msg.data[2] == 1:
                ret = contract.storage[to] // "Balance of %s: %s" % (to, ret)
                return(ret)

            # Withdraw
            elif msg.data[2] == 2: // "Withdraw"
                if msg.sender == exchange:
                    sender = msg.data[0]
                    balance = contract.storage[sender]
                    if balance < value:
                        return(0) // "Insufficient funds, %s had %d, needed %d" % (sender, balance, value)
                else:
                    sender = msg.sender
                    if balance < value:
                        return(0) // "Insufficient funds, %s has %d needs %d" % (sender, balance, value)
                contract.storage[sender] = contract.storage[sender] - value
                send(msg.data[0], value)
                return(1)

            # Check ownership
            elif msg.data[2] == 3: // "Checking ownership"
                isowner = 0
                if to == exchange: // "Checking %s against %s" % (to, exchange)
                    isowner = exchange
                return(exchange)

            # Add to balance - TODO - allow balance adjustments?
            elif msg.data[2] == 4 and msg.sender == exchange: // #define 0x45746865724578=EX
                if value < 1 or value > 1 * 10 ^ 18:
                    return(0)
                contract.storage[to] = contract.storage[to] + value // "Adjusting balance by %d" % value

            # Change ownership
            elif msg.data[2] == 5 and msg.sender == exchange:
                contract.storage[15] = msg.data[1]
                return(0) // "Set owner to %s" % msg.data[1]

        return(1)

    elif msg.sender == exchange:

        contract.storage[msg.sender] = msg.value # Set balance for sender from endowment

        # NameReg
        call(msg.data[1], msg.data[2])

        # Set contract parent and owner
        contract.storage[14] = msg.data[0] # Set c3D parent
        contract.storage[15] = msg.data[0] // #define msg.data[0]=EX

        # Set contract as active
        contract.storage[1] = 1 // "Initializing storage for %s" % msg.data[0]

        return(1)
