# trades.se -- Ethereum contract
#
# Copyright (c) 2014 EtherEx
#
# This software may be modified and distributed under the terms
# of the MIT license.  See the LICENSE file for details.

#
# Trades
#

# Slot allocation:
# n + 1: Type (buy/sell)
# n + 2: Price
# n + 3: Amount
# n + 4: Owner (buyer/seller)
# n + 5: Market
# n + 7: Block #
# n + 8: Previous trade pointer
# n + 9: Next trade pointer

init:
    # c3D definitions
    contract.storage[10] = 0x88554646BA # c3D linked list
    contract.storage[15] = msg.sender # Owner of this c3D contract
    contract.storage[16] = msg.sender # Creator of this c3D contract
    contract.storage[17] = block.timestamp # TimeStamp this c3D contract was created

code:
    # Basic gas check
    if tx.gas < 1000:
        return(0) // "Insufficient gas"

    # Get our status
    status = contract.storage[1]

    # Get reference to exchange
    exchange = contract.storage[15]

    # Logging
    contract.storage[20] = msg.datasize
    contract.storage[21] = tx.gas
    contract.storage[22] = block.timestamp

    # Get the total number of markets
    total = contract.storage[2]

    # Get our linked list start
    start = contract.storage[18]

    # Get our last recorded pointer
    last = contract.storage[19]

    # Slots used per data group
    slots = 10
    used = 5 # Current number of slots used

    # DEBUG
    if msg.value > 0: // "Refunding value: %s" % msg.value
        send(tx.origin, msg.value)

    if status == 1:
        if msg.datasize == 1: // "Getting trade"
            trade = array(slots - used)
            trade[0] = contract.storage[msg.data[0]] // "Buy or sell"
            trade[1] = contract.storage[msg.data[0] + 1] // "Price"
            trade[2] = contract.storage[msg.data[0] + 2] // "Amount"
            trade[3] = contract.storage[msg.data[0] + 3] // "Owner"
            trade[4] = contract.storage[msg.data[0] + 4] // "Market"
            return(trade, slots - used)

        #
        # Add trade
        #
        elif msg.datasize == 6:
            if msg.data[0] == 1:
                if msg.sender == exchange:
                    trade = msg.data[1]
                    price = msg.data[2]
                    amount = msg.data[3]
                    owner = msg.data[4]
                    market = msg.data[5]

                    if trade < 1 or trade > 2:
                        return(2) // "Invalid trade type"
                    if price < 1 or price > 2^254:
                        return(3) // "Invalid price"
                    if amount < 1 or amount > 2^254:
                        return(4) // "Invalid amount"
                    if owner < 1 or owner > 2^254:
                        return(5) // "Invalid owner"
                    if market < 1 or market > 2^254: // "TODO - Get and check market count"
                        return(6) // "Invalid market"

                    # Find our next available slots
                    next = contract.storage[last + 9]

                    # Use start for first trade
                    # TODO - check if that can be moved to setting an initial value and handling it when clearing a trade
                    if !next:
                        next = start

                    i = 0
                    while i < slots - 3:
                        contract.storage[next + i] = msg.data[i + 1]
                        i = i + 1

                    # Set block number
                    contract.storage[next + 7] = block.number

                    # Set previous and next pointers
                    contract.storage[next + 8] = last
                    contract.storage[next + 9] = next + slots # TODO - fix this...

                    # Set new last pointer
                    contract.storage[19] = next

                    # Increment total
                    contract.storage[2] = total + 1

                    return(next)

        #
        # Remove trade
        #
        elif msg.datasize == 2:
            if msg.data[0] == 0:
                if msg.sender == exchange:
                    if contract.storage[msg.data[1]]: # Check there is a trade to remove

                        # Get previous and next pointers
                        previous = contract.storage[msg.data[1] + 8]
                        next = contract.storage[msg.data[1] + 9]

                        #
                        # Update pointers
                        #
                        if msg.data[1] != start and msg.data[1] != last:
                            # Trade is neither the start or the last
                            # Update previous trade's next to next trade
                            contract.storage[previous + 9] = next
                            # Update next trade's previous to previous trade
                            contract.storage[next + 8] = previous
                            # TODO - Prefill this trade's next with last's next?
                            # contract.storage[msg.data[1] + 9] = contract.storage[last + 9]
                            # Set last's next to this slot for replacement
                            # contract.storage[last + 9] = msg.data[1]
                        elif msg.data[1] == start and msg.data[1] != last:
                            # Trade is the start trade, but not the last
                            # Update start to next trade
                            contract.storage[18] = next
                            # Update next trade's previous to itself
                            contract.storage[next + 8] = next
                        elif msg.data[1] != start and msg.data[1] == last:
                            # Trade is the last trade, but not the start
                            # Update previous trade's next to this trade
                            contract.storage[previous + 9] = msg.data[1]
                            # Update last to this trade's previous
                            contract.storage[19] = previous
                        else:
                            # Only one trade in list as start and last
                            # Update start to this trade
                            contract.storage[18] = msg.data[1]
                            # Update last to this trade
                            contract.storage[19] = msg.data[1]

                        # Decrement total
                        contract.storage[2] = total - 1

                        # Clear storage
                        c = 0
                        while c < slots: # Leave next pointer set above
                            contract.storage[msg.data[1] + c] = 0
                            c = c + 1

                        return(1)

        return(0)

    elif msg.sender == exchange:

        # NameReg
        call(msg.data[1], msg.data[2])

        # Set contract parent and owner
        contract.storage[14] = msg.data[0] # Set c3D parent
        contract.storage[15] = msg.data[0] # Set reference to exchange //define msg.data[0]=EX
        contract.storage[18] = 100 # Set our linked list start
        contract.storage[19] = 100 # Set our start as last pointer

        # Set contract as active
        contract.storage[1] = 1 // "Initializing storage for sender %s" % msg.data[0]

        return(1)
