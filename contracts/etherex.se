# etherex.se -- Ethereum contract
#
# Copyright (c) 2014-2015 EtherEx
#
# This software may be modified and distributed under the terms
# of the MIT license.  See the LICENSE file for details.

#
# EtherEx
#

data type  # 0x
data creator  # 0x1
data created  # 0x2
data status  # 0x3
data last_market  # 0x4
data last_trade  # 0x5

data markets_ptr  # 0x6
data trades_ptr  # 0x7

data log_gas  # 0x8
data log_last_trade  # 0x9
data log_timestamp  # 0xa

data markets[2^160](id, name, contract, decimals, precision, minimum, last_price, owner, block, total_trades, trade_ids[](id))
data trades[2^160](id, type, market, amount, price, owner, block, refhash)
data balances[][](available, trading)

extern subcurrency: [balance:i:i, transfer:ii:i]
extern namereg: [getname:i:i, register:ii:i, unregister:i:i]

macro MARKET_FIELDS():
    11

macro TRADE_FIELDS():
    8

macro refund():
    if msg.value > 0:
        send(msg.sender, msg.value)

macro check_arguments($amount, $price, $market_id):
    if not $amount:
        return(2)
    if not $price:
        return(3)
    if not $market_id:
        return(4)

macro save_trade($type, $amount, $price, $market_id):
    trade = [$type, $market_id, $amount, $price, msg.sender, block.number]
    trade_id = sha3(trade:arr)

    # Save trade
    if !self.trades[trade_id].id:
        self.trades[trade_id].id = trade_id
        self.trades[trade_id].type = $type
        self.trades[trade_id].market = $market_id
        self.trades[trade_id].amount = $amount
        self.trades[trade_id].price = $price
        self.trades[trade_id].owner = msg.sender
        self.trades[trade_id].block = block.number
        self.trades[trade_id].refhash = ref(self.trades[trade_id].id)

        # Update available and trading amounts for sells
        if $type == 2:
            self.balances[msg.sender][$market_id].available -= $amount
            self.balances[msg.sender][$market_id].trading += $amount

        # Update market
        new_total = self.markets[$market_id].total_trades + 1
        self.markets[$market_id].total_trades = new_total
        self.markets[$market_id].trade_ids[new_total].id = trade_id

        # Save last trade ID, not much use currently
        self.last_trade = trade_id
    else:
        return(15) // "Trade already exists"

    # Record last added trade
    self.log_last_trade = trade_id

    return(trade_id)

macro remove_trade($trade_id):
    self.trades[$trade_id].id = 0
    self.trades[$trade_id].type = 0
    self.trades[$trade_id].market = 0
    self.trades[$trade_id].amount = 0
    self.trades[$trade_id].price = 0
    self.trades[$trade_id].owner = 0
    self.trades[$trade_id].block = 0
    self.trades[$trade_id].refhash = 0


def init():
    self.creator = msg.sender  # Creator of this contract
    self.created = block.timestamp  # Timestamp when this contract was created

def shared():
    # Basic gas check
    if msg.gas < 1000:
        return(0) // "Insufficient gas"

    # Logging
    self.log_gas = msg.gas
    self.log_timestamp = block.timestamp


#
# Get price by market ID
#
def price(market_id):
    refund()
    price = self.markets[market_id].last_price
    return(price)


#
# Buy / Sell actions
#
def buy(amount, price, market_id):
    check_arguments(amount, price, market_id)

    # Calculate ETH value
    value = ((amount * price) / (self.markets[market_id].precision * 10 ^ self.markets[market_id].decimals)) * 10 ^ 18

    #
    # Check buy value
    #
    if msg.value < self.markets[market_id].minimum:
        refund()
        return(12) // "Minimum ETH trade amount not met, minimum is %s, got %d" % (self.markets[market_id].minimum, msg.value)

    # Check msg.value and value match
    if msg.value < value:
        refund()
        return(13) // "Trade amount mismatch"

    # Refund excess value
    if msg.value > value:
        send(msg.sender, msg.value - value)

    save_trade(1, amount, price, market_id)

    return(0)


def sell(amount, price, market_id):
    check_arguments(amount, price, market_id)

    # Calculate ETH value
    value = ((amount * price) / (self.markets[market_id].precision * 10 ^ self.markets[market_id].decimals)) * 10 ^ 18

    #
    # Check sell value
    #
    if value < self.markets[market_id].minimum:
        refund()
        return(12) // "Minimum ETH trade amount not met, minimum is %s, got %d" % (self.markets[market_id].minimum, msg.value)

    # Check balance of subcurrency
    balance = self.balances[msg.sender][market_id].available
    if balance >= amount:
        save_trade(2, amount, price, market_id)

    return(0)

#
# Trade
#
def trade(max_amount, trade_ids:arr):
    # Set max_value from initial msg.value
    max_value = msg.value

    # Try to fulfill each trade passed
    t = 0
    size = len(trade_ids)

    while t < size:
        trade_id = trade_ids[t]

        # Make sure the trade has been mined, obvious HFT prevention
        if block.number <= self.trades[trade_id].block:
            return(14)

        # Get market
        market_id = self.trades[trade_id].market
        contract = self.markets[market_id].contract
        decimals = self.markets[market_id].decimals
        precision = self.markets[market_id].precision
        minimum = self.markets[market_id].minimum

        # Get trade
        type = self.trades[trade_id].type
        amount = self.trades[trade_id].amount
        price = self.trades[trade_id].price
        owner = self.trades[trade_id].owner

        # Fill buy order
        if type == 1:

            # Get available balance
            balance = self.balances[msg.sender][market_id].available

            if balance > 0:

                # Determine fill amount
                fill = min(amount, min(balance, max_amount))

                # Calculate value
                value = ((fill * price) * 10 ^ 18) / (precision * 10 ^ decimals)

                # Check buy value
                if value < minimum:
                    if value:
                        send(msg.sender, max_value)
                    return(13)

                # Update trade amount or remove
                if fill < amount:
                    self.trades[trade_id].amount -= fill
                else:
                    remove_trade(trade_id)

                # Update balances
                self.balances[msg.sender][market_id].available -= fill
                self.balances[owner][market_id].available += fill

                # Transfer ETH
                send(msg.sender, value)

            else:
                return(12)

        elif type == 2:

            if max_value > 0:

                # Check sell value
                if max_value < minimum:
                    if max_value > 0:
                        send(msg.sender, max_value)
                    return(13)

                # Calculate value of trade
                tradevalue = ((amount * price) * 10 ^ 18) / (precision * 10 ^ decimals)

                # Determine fill value
                value = min(max_value, tradevalue)

                # Calculate fill amount, update trade amount or remove filled trade
                if value < tradevalue:
                    fill = ((value * (precision * 10 ^ decimals)) / price) / 10 ^ 18
                    self.trades[trade_id].amount -= fill
                else:
                    fill = amount
                    remove_trade(trade_id)

                # Update balances
                self.balances[self][market_id].trading -= fill
                self.balances[msg.sender][market_id].available += fill

                # Transfer ETH
                send(owner, value)

            else:
                return(12)

        # Update market last price
        self.markets[market_id].last_price = price

        # Log
        log(contract, type, price, fill, data=[block.timestamp])

        # Update max_amount and max_value
        max_amount -= fill
        max_value -= value

        # Next trade
        t += 1

    # Refund excess value
    if max_value:
        send(msg.sender, max_value)

    return(1)

#
# Deposit - from subcurrency contracts only
#
def deposit(address, amount, market_id):
    if msg.sender == self.markets[market_id].contract:
        balance = self.balances[address][market_id].available
        newbalance = balance + amount
        self.balances[address][market_id].available = newbalance
        return(newbalance)
    return(0)

#
# Withdrawal - to subcurrency contracts only
#
def withdraw(amount, market_id):
    balance = self.balances[msg.sender][market_id].available
    if balance >= amount:
        self.balances[msg.sender][market_id].available = balance - amount
        ret = self.markets[market_id].contract.transfer(msg.sender, amount, datasz=2)
        return(ret)
    return(0)

#
# Cancelation
#
def cancel(trade_id):
    # Get trade
    type = self.trades[trade_id].type
    amount = self.trades[trade_id].amount
    price = self.trades[trade_id].price
    owner = self.trades[trade_id].owner

    # Get market
    market_id = self.trades[trade_id].market
    contract = self.markets[market_id].contract
    decimals = self.markets[market_id].decimals
    precision = self.markets[market_id].precision

    # Check the owner
    if msg.sender == owner:

        # Clear the trade first
        remove_trade(trade_id)

        # Issue refunds
        if type == 1:
            # ETH sell refund
            value = ((amount * price) / (precision * 10 ^ decimals)) * 10 ^ 18
            send(msg.sender, value)

        elif type == 2:
            # Subcurrency refund
            self.balances[msg.sender][market_id].trading -= amount
            self.balances[msg.sender][market_id].available += amount

        return(1)

    return(0)

#
# Add market
#
def add_market(name, contract, decimals, precision, minimum):
    # if msg.value < 10 ^ 18: # TODO - Require fee to add market?
    #     if msg.value > 0: # "Refunding"
    #         ret = send(msg.sender, msg.value)
    #     return(0) # "Insufficient deposit to add market"

    id = self.last_market + 1

    # Set markets pointer
    if id == 1:
        self.markets_ptr = ref(self.markets[1].id)

    # "TODO - Check data..."
    self.markets[id].id = id
    self.markets[id].name = name
    self.markets[id].contract = contract
    self.markets[id].decimals = decimals
    self.markets[id].precision = precision
    self.markets[id].minimum = minimum
    self.markets[id].last_price = 1
    self.markets[id].owner = msg.sender
    self.markets[id].block = block.number

    # Set last market ID
    self.last_market = id

    # TODO - Issue ETX to market creator ?
    # if msg.value > 0:
    #     xeth = array(4)
    #     xeth = call(markets, [1], 1, 4)
    #     ret = msg(xeth[3], msg.value, [msg.sender, msg.value], 2)

    return(1)

#
# Getters
#
def get_last_market_id():
    t = self.last_market
    return(t)

def get_market(id):
    market = array(MARKET_FIELDS() - 1)

    market[0] = self.markets[id].id
    market[1] = self.markets[id].name
    market[2] = self.markets[id].contract
    market[3] = self.markets[id].decimals
    market[4] = self.markets[id].precision
    market[5] = self.markets[id].minimum
    market[6] = self.markets[id].last_price
    market[7] = self.markets[id].owner
    market[8] = self.markets[id].block
    market[9] = self.markets[id].total_trades

    if market:
        return(market:arr)
    return([0]:arr)

def get_trade_ids(market_id):
    trades_count = self.markets[market_id].total_trades
    trade_ids = array(trades_count)

    i = 1
    while i < trades_count + 1:
        trade_ids[i - 1] = self.markets[market_id].trade_ids[i].id
        i = i + 1

    if trade_ids:
        return(trade_ids:arr)
    return([0]:arr)

def get_trade(id):
    trade = array(TRADE_FIELDS())

    trade[0] = self.trades[id].id
    trade[1] = self.trades[id].type
    trade[2] = self.trades[id].market
    trade[3] = self.trades[id].amount
    trade[4] = self.trades[id].price
    trade[5] = self.trades[id].owner
    trade[6] = self.trades[id].block
    trade[7] = self.trades[id].refhash

    if trade:
        return(trade:arr)
    return([0]:arr)

def get_sub_balance(address, market_id):
    return([self.balances[address][market_id].available, self.balances[address][market_id].trading]:arr)

#
# Change creator
#
def change_creator(new_creator):
    if msg.sender == self.creator:
        self.creator = new_creator // "Set creator to %s" % new_owner
        return(1)
    return(0)

#
# NameReg
#
def register(namereg):
    if msg.sender == self.creator:
        namereg.register(text("EtherEx"), datasz=1)

def unregister(namereg):
    if msg.sender == self.creator:
        namereg.unregister()
