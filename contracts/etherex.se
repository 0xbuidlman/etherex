# etherex.se -- Ethereum contract
#
# Copyright (c) 2014 EtherEx
#
# This software may be modified and distributed under the terms
# of the MIT license.  See the LICENSE file for details.

#
# EtherEx
#

init:
    # c3D definitions
    contract.storage[10] = 0x88554646AA # c3D action contract
    # 0x11 : (B||C) : pointer to an applicable datamodel.json
    # 0x12 : (B||C) : pointer to an applicable set (or single) of UI file(s) structure
    contract.storage[15] = msg.sender # Owner of this c3D contract
    contract.storage[16] = msg.sender # Creator of this c3D contract
    contract.storage[17] = block.timestamp # TimeStamp this c3D contract was created

code:
    # Basic gas check
    if tx.gas < 1000:
        return(0) // "Insufficient gas"

    # Get our status
    status = contract.storage[1]

    # Get reference to owner / DOUG
    owner = contract.storage[15]

    # Get markets count
    cmarket = contract.storage[7]

    # Logging
    contract.storage[20] = msg.datasize
    contract.storage[21] = tx.gas
    contract.storage[22] = block.timestamp

    # Operate only if initialized
    if status == 1:
        #
        # Basic checks
        #
        if msg.datasize < 1: // "No data to process"
            if msg.value > 0: // "Refunding"
                send(msg.sender, msg.value)
            return(0)

        if msg.data[0] < 1 or msg.data[0] > 10: // "Invalid operation"
            if msg.value > 0: // "Refunding"
                send(msg.sender, msg.value)
            return(2)

        # Add Buy / Sell trade checks
        if msg.data[0] < 3: // "Missing amount"
            if msg.datasize < 2:
                if msg.value > 0: // "Refunding"
                    send(msg.sender, msg.value)
                return(3)

            elif msg.data[1] < 1: // "Invalid amount"
                if msg.value > 0: // "Refunding"
                    send(msg.sender, msg.value)
                return(4)

            elif msg.datasize < 3: // "Missing price"
                if msg.value > 0: // "Refunding"
                    send(msg.sender, msg.value)
                return(5)

            elif msg.data[2] < 1 * 10 ^ 8: // "Invalid price"
                if msg.value > 0: // "Refunding"
                    send(msg.sender, msg.value)
                return(6)

            elif msg.datasize < 4: // "Missing market ID"
                if msg.value > 0: // "Refunding"
                    send(msg.sender, msg.value)
                return(7)

            elif msg.data[3] > cmarket or msg.data[3] < 1: // "Invalid market ID"
                if msg.value > 0: // "Refunding"
                    send(msg.sender, msg.value)
                return(8)

            if msg.datasize > 4: // "Too many arguments"
                if msg.value > 0: // "Refunding"
                    send(msg.sender, msg.value)
                return(9)

        #
        # Initialize markets
        #
        markets = contract.storage[6]

        # Get our request amount and price
        amount = msg.data[1] // "Trade amount: %d" % amount
        price = msg.data[2] // "Trade price: %d" % price

        # Basic amount and price checks
        if msg.data[0] < 3 and amount > 2^254: # or amount < 1:
            if msg.value > 0: // "Refunding"
                send(msg.sender, msg.value)
            return(10) // "Amount out of range"

        if msg.data[0] < 3 and price > 2^254: # or price < 1 * 10 ^ 8 + 1:
            if msg.value > 0: // "Refunding"
                send(msg.sender, msg.value)
            return(11) // "Price out of range"

        #
        # Buy / Sell actions
        #
        if msg.data[0] < 3:
            market = array(4)
            marketid = msg.data[3]

            # Get market
            market = call(markets, [marketid], 1, 4)

            value = (amount * market[2]) / price

            #
            # Check trade amounts and balances
            #
            if msg.data[0] == 1:
                #
                # Check buy value
                #
                if msg.value < market[1]:
                    if msg.value > 0: // "Refunding"
                        send(msg.sender, msg.value)
                    return(12) // "Minimum %s trade amount not met, minimum is %s, got %d" % (market[0], market[2], msg.value)

                # Check msg.value and value match
                if msg.value < value:
                    if msg.value > 0: // "Refunding"
                        send(msg.sender, msg.value)
                    return(13) // "Trade amount mismatch"

                # Refund excess value
                if msg.value > value:
                    send(msg.sender, msg.value - value)

            else:
                #
                # Check sell value
                #
                if value < market[1]:
                    if msg.value > 0: // "Refunding"
                        send(msg.sender, msg.value)
                    return(12) // "Minimum %s trade amount not met, minimum is %s, got %d" % (market[0], market[2], msg.value)

                # Transfer subcurrency trade amount
                ret = call(market[3], [msg.sender, contract.address, amount / 10 ^ 18], 3)

                # Expects standard returns values
                if ret != 1:
                    return(0)

            // "Trade amounts OK for %s" % market[0]
            pricekey = price
            balances = market[3]
            indexes = contract.storage[4]
            trades = contract.storage[5]

            # New trade
            trade = array(5)
            trade[0] = 1
            trade[1] = msg.data[0]
            trade[2] = price
            trade[3] = amount
            trade[4] = msg.sender
            trade[5] = marketid

            tradeid = call(trades, trade, 6) # Trade added
            contract.storage[9] = tradeid
            booklength = (tradeid - 100) / 5 + 1
            # contract.storage[pricekey] = booklength
            contract.storage[100 + marketid] = booklength

            #
            # ETX issuance
            #

            # # Get market
            # xeth = array(4)
            # xeth = call(markets, [1], 1, 4)

            # reward = (amount * price) / (10 ^ 24) // "Sending reward of %s to %s" % (reward, msg.sender)
            # data = array(2)
            # data[0] = msg.sender
            # data[1] = reward
            # call(xeth[3], data, 2) // #define xethaddr=ETX

            return(tradeid)

        #
        # Trade
        #
        elif msg.data[0] == 3: // "TRADE"
            # Try to fulfill each trade passed
            t = 1
            trades = contract.storage[5]
            markets = contract.storage[6]

            while t < msg.datasize:
                tradeid = msg.data[t]

                # Make sure the trade has been mined, obvious HFT prevention
                if block.number <= trade[7]:
                    return(14)

                trade = call(trades, [tradeid], 1, 5)
                market = call(markets, [trade[4]], 1, 5)

                value = (trade[2] * market[2]) / trade[1]

                # Checking trade amounts and balances
                # TODO - Check subcurrency balances
                if trade[0] == 1: # Check buy amount
                    # TODO balance check or using return values?
                    # if balance < trade[2]:
                    #     if msg.value > 0: // "Refunding"
                    #         send(msg.sender, msg.value)
                    #     return(13) // "Insufficient balance"

                    # Transfer sub / asset
                    ret = call(market[3], [msg.sender, trade[3], trade[2] / 10 ^ 18], 3)

                    # Expects standard returns values
                    if ret != 1:
                        return(0)

                    # Transfer ETH
                    send(msg.sender, value)

                    # Clear trade
                    ret = call(trades, [0, tradeid], 2)

                    if ret != 1:
                        return(0) // "Error"

                elif trade[0] == 2: # Check sell amount
                    if msg.value < value:
                        if msg.value > 0: // "Refunding"
                            send(msg.sender, msg.value)
                        return(12) // "Minimum trade amount not met, minimum is %s, got %d" % (trade[2], msg.value)

                    # Refund excess value
                    if msg.value > value:
                        send(msg.sender, msg.value - value)

                    # TODO - Better precision handling

                    # Transfer ETH
                    send(trade[3], value)

                    # Transfer sub / asset
                    ret = call(market[3], [contract.address, msg.sender, trade[2] / 10 ^ 18], 3)

                    # Expects standard returns values
                    if ret != 1:
                        return(0)

                    # Clear trade
                    ret = call(trades, [0, tradeid], 2)

                    if ret != 1:
                        return(0) // "Error"

                # TODO - Update price indexes
                # indexes = contract.storage[4]
                # call(indexes, [trade[4], trade[1]], 2)

                # Next trade
                t = t + 1

            if ret != 1:
                return(0) // "Error"
            else:
                return(ret) // "Trade(s) fulfilled"

        #
        # Deposit
        #
        elif msg.data[0] == 4: // "DEPOSIT"
            balances = contract.storage[3]

            data = array(2)
            data[0] = msg.sender
            data[1] = msg.value
            ret = msg(tx.gas - 25, balances, msg.value, data, 2) # "Updating Balances"
            return(ret)

        #
        # Withdrawal
        #
        elif msg.data[0] == 5: // "WITHDRAW"
            balances = contract.storage[3]

            data = array(3)
            data[0] = msg.sender
            data[1] = msg.data[1]
            data[2] = 2
            ret = call(balances, data, 3)
            return(ret)

        #
        # Cancelation
        #
        elif msg.data[0] == 6: // "CANCEL"
            trades = contract.storage[5]

            # Get the trade
            trade = call(trades, [msg.data[1]], 1, 5)
            market = call(markets, [trade[4]], 1, 5)

            # Check the owner
            if msg.sender == trade[3]:

                # Clear the trade first
                ret = call(trades, [0, msg.data[1]], 2)

                # Issue refunds
                if trade[0] == 1:
                    # ETH sell refund
                    value = (trade[2] * market[2]) / trade[1]
                    send(msg.sender, value)

                elif trade[0] == 2:
                    # Subcurrency refund
                    ret = call(market[3], [contract.address, trade[3], trade[2] / 10 ^ 18], 3)

            if !ret:
                return(0) // "Error"
            else:
                return(ret) // "Trade canceled"

        #
        # Add market
        #
        elif msg.data[0] == 7: // "ADDMARKET"
            # if msg.value < 10 ^ 18: # TODO - Require fee to add market?
            #     if msg.value > 0: # "Refunding"
            #         ret = send(msg.sender, msg.value)
            #     return(0) # "Insufficient deposit to add market"

            markets = contract.storage[6]
            market = array(6) // "TODO - Check data..."
            market[0] = 1
            market[1] = msg.data[3]
            market[2] = amount
            market[3] = price
            market[4] = msg.data[4]
            market[5] = msg.data[5]
            ret = call(markets, market, 6) // "Updating Currencies"

            # Store last count
            contract.storage[7] = ret

            # TODO - Issue ETX to market creator ?
            # if msg.value > 0:
            #     xeth = array(4)
            #     xeth = call(markets, [1], 1, 4)
            #     ret = msg(xeth[3], msg.value, [msg.sender, msg.value], 2)

            if !ret:
                return(42) // "Error adding market"
            else:
                return(ret) // "Market added"

        #
        # Change ownership
        #
        elif msg.data[0] == 8 and msg.sender == owner:
            contract.storage[15] = msg.data[1] // "Set owner to %s" % msg.data[1]
            return(msg.data[1])

        #
        # Change balances contract - TODO - should it even be possible? upgrades?
        #
        elif msg.data[0] == 9 and msg.sender == owner:
            contract.storage[3] = msg.data[1] // "Set Balances owner to %s" % msg.data[1]
            return(msg.data[1])

        #
        # Edit market
        #
        elif msg.data[0] == 10:
            return(0) // "Not implemented yet"

        #
        # Get price
        #
        elif msg.data[0] == "price":
            if msg.value > 0: // "Refunding"
                send(msg.sender, msg.value)
            if msg.datasize > 3: // "Too many arguments"
                return(9)

            #
            # Get last price
            #
            indexes = contract.storage[4]
            price = call(indexes, [msg.data[1], msg.data[2]], 2)
            return(price)

        #
        # "Input out of range"
        #
        elif msg.data[0] > 10:
            if msg.value > 0: // "Refunding"
                send(msg.sender, msg.value)
            return(9) // "Protect the citizens"
            # suicide(msg.sender) // "Protect the citizens"

        #
        # Uncaught operation
        #
        else:
            if msg.value > 0: // "Refunding"
                send(msg.sender, msg.value)
            return(0) // "Protect the citizens"

        #
        # Return
        #
        if amount == 0:
            if msg.value > 0: // "Refunding"
                send(msg.sender, msg.value)
            return(20)
        else:
            if !ret:
                ret = 20
            return(ret) // "Order placed"

    #
    # Post-creation init
    #
    elif msg.sender == owner:

        contract.storage[3] = msg.data[0] // "Balances"
        contract.storage[4] = msg.data[1] // "Indexes"
        contract.storage[5] = msg.data[2] // "Trades"
        contract.storage[6] = msg.data[3] // "Currencies (markets), storage # 7 for count"

        # NameReg
        call(msg.data[4], msg.data[5])

        # Set contract as active
        contract.storage[1] = 1

        return(1) // "EtherEx initialized"
