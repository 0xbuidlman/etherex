# etherex.se -- Ethereum contract
#
# Copyright (c) 2014 EtherEx
#
# This software may be modified and distributed under the terms
# of the MIT license.  See the LICENSE file for details.

#
# EtherEx
#

data type # 0x
data owner # 0x1
data creator # 0x2
data created # 0x3
data status # 0x4
data last_market # 0x5

data log_gas # 0x6
data log_last_trade # 0x7
data log_timestamp # 0x8

data markets_ptr # 0x9
data trades_ptr # 0xA

TRADE_FIELDS = 6
MARKET_FIELDS = 9
data markets[2^160](id, name, contract, decimals, precision, minimum, last_price, owner, block)
data trades[2^160](type, market, amount, price, owner, block)

extern any: [call]

macro refund():
    if msg.value > 0:
        send(msg.sender, msg.value)

macro save_trade($type, $amount, $price, $market_id):
    trade = [$type, $market_id, $amount, $price, msg.sender, block.number]
    trade_id = sha3(trade, 6)

    # Save trade
    if !self.trades[trade_id].type:
        self.trades[trade_id].type = trade[0]
        self.trades[trade_id].market = trade[1]
        self.trades[trade_id].amount = trade[2]
        self.trades[trade_id].price = trade[3]
        self.trades[trade_id].owner = trade[4]
        self.trades[trade_id].block = trade[5]
    else:
        return(15) // "Trade already exists"

    # Record last added trade
    self.log_last_trade = trade_id

    return(trade_id)

macro remove_trade($trade_id):
    self.trades[$trade_id].type = 0
    self.trades[$trade_id].market = 0
    self.trades[$trade_id].amount = 0
    self.trades[$trade_id].price = 0
    self.trades[$trade_id].owner = 0
    self.trades[$trade_id].block = 0


def init():
    # c3D definitions
    self.type = 0x88554646AA # c3D action contract
    self.owner = msg.sender # Owner of this c3D contract
    self.creator = msg.sender # Creator of this c3D contract
    self.created = block.timestamp # TimeStamp this c3D contract was created


def shared():
    # Basic gas check
    if tx.gas < 1000:
        return(0) // "Insufficient gas"

    # Logging
    self.log_gas = tx.gas
    self.log_timestamp = block.timestamp


#
# Get price by market ID
#
def price(market_id):
    if msg.value > 0: // "Refunding"
        send(msg.sender, msg.value)

    price = self.markets[market_id].last_price

    return(price)


#
# Buy / Sell actions
#
def buy(amount, price, market_id):
    # Calculate ETH value
    value = ((amount * price) / (self.markets[market_id].precision * 10 ^ self.markets[market_id].decimals)) * 10 ^ 18

    #
    # Check buy value
    #
    if msg.value < self.markets[market_id].minimum:
        refund()
        return(12) // "Minimum ETH trade amount not met, minimum is %s, got %d" % (self.markets[market_id].minimum, msg.value)

    # Check msg.value and value match
    if msg.value < value:
        refund()
        return(13) // "Trade amount mismatch"

    # Refund excess value
    if msg.value > value:
        send(msg.sender, msg.value - value)

    save_trade(1, amount, price, market_id)

    return(0)


def sell(amount, price, market_id):
    # Calculate ETH value
    value = ((amount * price) / (self.markets[market_id].precision * 10 ^ self.markets[market_id].decimals)) * 10 ^ 18

    #
    # Check sell value
    #
    if value < self.markets[market_id].minimum:
        refund()
        return(12) // "Minimum ETH trade amount not met, minimum is %s, got %d" % (self.markets[market_id].minimum, msg.value)

    # Transfer subcurrency trade amount - TODO handle amount precision in sub contracts?
    ret = self.markets[market_id].contract.call(data=[msg.sender, self, amount / 10 ^ self.markets[market_id].decimals], datasz=3, outsz=1)

    # Expects standard returns values
    if ret != 1:
        return(0)

    save_trade(2, amount, price, market_id)

    return(0)

#
# Trade
#
def trade(trade_ids, size):
    # Try to fulfill each trade passed
    t = 1
    while t < size:
        trade_id = trade_ids[t]

        # Make sure the trade has been mined, obvious HFT prevention
        if block.number <= self.trades[trade_id].block:
            return(14)

        # Get market
        market_id = self.trades[trade_id].market
        contract = self.markets[market_id].contract
        decimals = self.markets[market_id].decimals
        precision = self.markets[market_id].precision

        # Get trade
        type = self.trades[trade_id].type
        amount = self.trades[trade_id].amount
        price = self.trades[trade_id].price
        owner = self.trades[trade_id].owner

        value = ((amount * price) / (precision * 10 ^ decimals)) * 10 ^ 18

        # Checking trade amounts and balances
        if type == 1: # Check buy amount
            # TODO balance check or using return values?
            # if balance < self.trades[trade_id].price:
            #     if msg.value > 0: // "Refunding"
            #         send(msg.sender, msg.value)
            #     return(13) // "Insufficient balance"

            # Transfer sub / asset
            ret = contract.call(data=[msg.sender, owner, amount / 10 ^ decimals], datasz=3, outsz=1)

            # Expects standard returns values
            if ret != 1:
                return(0)

            # Transfer ETH
            send(msg.sender, value)

            # Clear trade
            remove_trade(trade_id)

        elif type == 2: # Check sell amount
            if msg.value < value:
                if msg.value > 0: // "Refunding"
                    send(msg.sender, msg.value)
                return(12) // "Minimum trade amount not met, minimum is %s, got %d" % (price, msg.value)

            # Refund excess value
            if msg.value > value:
                send(msg.sender, msg.value - value)

            # TODO - Better precision handling

            # Transfer ETH
            send(self.trades[trade_id].price, value)

            # Transfer sub / asset
            ret = contract.call(data=[self, msg.sender, price / 10 ^ decimals], datasz=3, outsz=1)

            # Expects standard returns values
            if ret != 1:
                return(0)

            # Clear trade
            remove_trade(trade_id)

        # Update market last price
        self.markets[market_id].last_price = price

        # TODO - Update price indexes
        # indexes = contract.storage[4]
        # call(indexes, [self.trades[trade_id].owner, self.trades[trade_id].owner], 2)

        # Next trade
        t = t + 1

    if ret != 1:
        return(0) // "Error"
    else:
        return(ret) // "Trade(s) fulfilled"

#
# Deposit - TODO, w/ balances
#
def deposit(amount):
    deposit = amount
    # balances = contract.storage[3]

    # data = array(2)
    # data[0] = msg.sender
    # data[1] = msg.value
    # ret = msg(tx.gas - 25, balances, msg.value, data, 2) # "Updating Balances"
    # return(ret)

#
# Withdrawal - TODO, w/ balances
#
def withdraw(amount):
    withdraw = amount
    # balances = contract.storage[3]

    # data = array(3)
    # data[0] = msg.sender
    # data[1] = msg.data[1]
    # data[2] = 2
    # ret = call(balances, data, 3)
    # return(ret)

#
# Cancelation
#
def cancel(trade_id):
    # Get trade
    type = self.trades[trade_id].type
    amount = self.trades[trade_id].amount
    price = self.trades[trade_id].price
    owner = self.trades[trade_id].owner

    # Get market
    market_id = self.trades[trade_id].market
    contract = self.markets[market_id].contract
    decimals = self.markets[market_id].decimals
    precision = self.markets[market_id].precision

    # Check the owner
    if msg.sender == owner:

        # Clear the trade first
        remove_trade(trade_id)

        # Issue refunds
        if type == 1:
            # ETH sell refund
            value = ((amount * price) / (precision * 10 ^ decimals)) * 10 ^ 18
            send(msg.sender, value)

        elif type == 2:
            # Subcurrency refund
            ret = contract.call(data=[self, price, price / 10 ^ decimals], datasz=3, outsz=1)

    if !ret:
        return(0) // "Error"
    else:
        return(ret) // "Trade canceled"

#
# Add market
#
def add_market(name, contract, decimals, precision, minimum):
    # if msg.value < 10 ^ 18: # TODO - Require fee to add market?
    #     if msg.value > 0: # "Refunding"
    #         ret = send(msg.sender, msg.value)
    #     return(0) # "Insufficient deposit to add market"

    id = self.last_market + 1

    # "TODO - Check data..."

    self.markets[id].id = id
    self.markets[id].name = name
    self.markets[id].contract = contract
    self.markets[id].decimals = decimals
    self.markets[id].precision = precision
    self.markets[id].minimum = minimum
    self.markets[id].last_price = text("null")
    self.markets[id].owner = msg.sender
    self.markets[id].block = block.number

    # Set last market ID
    self.last_market = id

    # TODO - Issue ETX to market creator ?
    # if msg.value > 0:
    #     xeth = array(4)
    #     xeth = call(markets, [1], 1, 4)
    #     ret = msg(xeth[3], msg.value, [msg.sender, msg.value], 2)

    return(1)

#
# Change ownership
#
def change_ownership(new_owner):
    if msg.sender == self.owner:
        self.owner = new_owner // "Set owner to %s" % new_owner
        return(1)
    return(0)

#
# Getters
#
def get_market(id):
    market = array(MARKET_FIELDS)

    market[0] = self.markets[id].id
    market[1] = self.markets[id].name
    market[2] = self.markets[id].contract
    market[3] = self.markets[id].decimals
    market[4] = self.markets[id].precision
    market[5] = self.markets[id].minimum
    market[6] = self.markets[id].last_price
    market[7] = self.markets[id].owner
    market[8] = self.markets[id].block

    if market:
        return(market, MARKET_FIELDS)
    return(0)
