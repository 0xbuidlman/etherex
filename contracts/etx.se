# etx.se -- Ethereum contract
#
# Copyright (c) 2014-2015 EtherEx
#
# This software may be modified and distributed under the terms
# of the MIT license.  See the LICENSE file for details.

#
# Example ETX subcurrency
#

data created
data accounts[2^160](balance, custodians[2^160](full, maxValue))

event Transfer(from:indexed, to:indexed, value)
event AddressApproval(address:indexed, proxy:indexed, result)
event AddressApprovalOnce(address:indexed, proxy:indexed, value)

# Boolean success/failure
macro SUCCESS: 1
macro FAILURE: 0

def init():
    self.created = block.timestamp
    self.accounts[msg.sender].balance = 1000000 * 10 ** 5

def transfer(_to, _value):
    # Prevent negative send from stealing funds
    if _to <= 0 or _value <= 0:
        return(FAILURE)

    # Get user balance
    balance = self.accounts[msg.sender].balance

    # Make sure balance is above or equal to amount
    if balance >= _value:

        # Update balances
        self.accounts[msg.sender].balance = balance - _value
        self.accounts[_to].balance += _value

        log(type=Transfer, msg.sender, _to, _value)

        return(SUCCESS)
    return(FAILURE)

def transferFrom(_from, _to, _value):
    # Prevent negative send from stealing funds
    if _from <= 0 or _value <= 0 or _to <= 0:
        return(FAILURE)

    # Get user balance
    balance = self.accounts[_from].balance

    # Make sure balance is above or equal to amount, and transfer is approved
    maxValue = self.accounts[_from].custodians[msg.sender].maxValue
    if balance >= _value and (self.accounts[_from].custodians[msg.sender].full or _value <= maxValue):
        # Update balances
        self.accounts[_from].balance = balance - _value
        self.accounts[_to].balance += _value

        # Reset approveOnce
        if maxValue:
            self.accounts[_from].custodians[msg.sender].maxValue = 0

        log(type=Transfer, _from, _to, _value)

        return(SUCCESS)
    return(FAILURE)

def balance():
    return(self.accounts[msg.sender].balance)

def balanceOf(_address):
    return(self.accounts[_address].balance)

def approve(_address):  # Implemented but unused and untested
    self.accounts[msg.sender].custodians[_address].full = 1
    log(type=AddressApproval, msg.sender, _address, 1)
    return(SUCCESS)

# Returns whether _proxy is allowed full custody of your account
def isApproved(_proxy):
    return(self.accounts[msg.sender].custodians[_proxy].full)

# Returns whether _proxy is allowed full custody of _target account
def isApprovedFor(_target, _proxy):
    return(self.accounts[_target].custodians[_proxy].full)

# Approve _address once for a transfer of _maxValue
def approveOnce(_address, _maxValue):
    self.accounts[msg.sender].custodians[_address].maxValue = _maxValue
    log(type=AddressApprovalOnce, msg.sender, _address, _maxValue)
    return(1)

# Verify _proxy is approved to make a one-time transfer, if so returns _maxValue
def isApprovedOnce(_proxy):
    value = self.accounts[msg.sender].custodians[_proxy].maxValue
    if value > 0:
        return(value)
    return(0)

# Verify _proxy is approved to make a one-time transfer for _target address,
# if so returns _maxValue
def isApprovedOnceFor(_target, _proxy):
    value = self.accounts[_target].custodians[_proxy].maxValue
    if value > 0:
        return(value)
    return(0)

# Unapprove full and one-time custody of your account by _address
def unapprove(_address):
    self.accounts[msg.sender].custodians[_address].full = 0
    self.accounts[msg.sender].custodians[_address].maxValue = 0
    log(type=AddressApproval, msg.sender, _address, 0)
    log(type=AddressApprovalOnce, msg.sender, _address, 0)
    return(SUCCESS)
