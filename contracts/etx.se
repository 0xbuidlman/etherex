# etx.se -- Ethereum contract
#
# Copyright (c) 2014-2015 EtherEx
#
# This software may be modified and distributed under the terms
# of the MIT license.  See the LICENSE file for details.

#
# Example ETX subcurrency
#

data owner
data exchange
data market_id
data balances[2^160](balance)

extern exchange: [add_market:iiiii:i, buy:iii:i, cancel:i:i, deposit:iii:i, get_market:i:a, get_sub_balance:ii:a, get_trade:i:a, get_trade_ids:i:a, price:i:i, sell:iii:i, trade:ii:i, withdraw:ii:i]

def init():
    self.owner = msg.sender
    self.balances[msg.sender].balance = 1000000 * 10 ** 5

def transfer(recipient, amount):
    # Prevent negative send from stealing funds
    if recipient <= 0 or amount <= 0:
        return(0)

    # Get user balance
    balance = self.balances[msg.sender].balance

    # Make sure balance is above or equal to amount
    if balance >= amount:

        # Update balances
        self.balances[msg.sender].balance = balance - amount
        self.balances[recipient].balance += amount

        # Notify exchange of deposit
        if recipient == self.exchange:
            ret = self.exchange.deposit(msg.sender, amount, self.market_id, datasz=3)
            # Exchange returns our new balance as confirmation
            if ret >= amount:
                return(1)
            # We return 2 as error code for notification failure
            return(2)

        return(1)
    return(0)

def balance(addr):
    return(self.balances[addr].balance)

def set_exchange(addr, market_id):
    if addr <= 0 or market_id <= 0:
        return(0)

    if msg.sender == self.owner:
        self.exchange = addr
        self.market_id = market_id
        return(1)
    return(0)

def change_ownership(new_owner):
    if new_owner <= 0:
        return(0)

    if msg.sender == self.owner:
        self.owner = new_owner // "Set owner to %s" % new_owner
        return(1)
    return(0)
