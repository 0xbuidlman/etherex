# indexes.se -- Ethereum contract
#
# Copyright (c) 2014 EtherEx
#
# This software may be modified and distributed under the terms
# of the MIT license.  See the LICENSE file for details.

#
# Indexes
#

init:
    contract.storage[2] = msg.sender

code:
    # Basic gas check
    if tx.gas < 1000:
        return(0) // "Insufficient gas"

    # Set our status
    status = contract.storage[1]

    # Set reference to exchange
    exchange = contract.storage[2]

    # Get our last recorded pointer
    last = contract.storage[10]

    ret = 0
    if msg.value > 0: // "Refunding excess value: %s" % msg.value
        ret = send(tx.gas / 2, tx.origin, msg.value)

    # Logging
    contract.storage[20] = msg.datasize
    contract.storage[21] = tx.gas
    contract.storage[22] = ret

    if status == 1:
        slots = 2
        if msg.datasize == 1: // "Getting indexes"
            if !last:
                last = 0
            if last > 100:
                total = (last - 100) / slots
            else:
                total = 0
            totalslots = total * slots
            indexes = array(totalslots + 1)
            indexes[0] = total
            i = 1
            while i < totalslots + 1:
                indexes[i] = contract.storage[100 + i]
                i = i + 1
            return(indexes, totalslots + 1)
        elif msg.datasize > 1:
            if msg.data[0] == 1:
                if msg.sender == exchange: // "Adding index"
                    i = 0
                    while i < slots:
                        contract.storage[last + 100 + i] = msg.data[i + 1]
                        i = i + 1
                    contract.storage[10] = last + slots
                    return(last)
            if msg.data[0] == 2:
                if msg.sender == exchange: // "Replacing index"
                    if msg.datasize < 4:
                        return(0)
                    contract.storage[msg.data[2] * slots + 100] = msg.data[1]
                    return(msg.data[2])
            elif msg.data[0] == 0:
                if msg.sender == exchange: // "Removing index # %d" % msg.data[1]
                    contract.storage[msg.data[1] * slots + 100] = 0
                    contract.storage[msg.data[1] * slots + 101] = 0
                    return(1)

    elif msg.sender == exchange:

        # Set contract owner
        contract.storage[2] = msg.data[0] // #define msg.data[0]=EX

        # Set contract as active
        contract.storage[1] = 1 // "Initializing storage for creator %s" % msg.data[0]

        return(1)
