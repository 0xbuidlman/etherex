# trades.se -- Ethereum contract
#
# Copyright (c) 2014 EtherEx
#
# This software may be modified and distributed under the terms
# of the MIT license.  See the LICENSE file for details.

#
# Trades
#

init:
    # c3D definitions
    contract.storage[10] = 0x88554646ab # 0x88554646AB
    contract.storage[15] = msg.sender
    contract.storage[16] = msg.sender
    contract.storage[17] = block.timestamp

code:
    # Basic gas check
    if tx.gas < 1000:
        return(0) // "Insufficient gas"

    # Get our status
    status = contract.storage[1]

    # Get reference to exchange
    exchange = contract.storage[15]

    # Logging
    contract.storage[20] = msg.datasize
    contract.storage[21] = tx.gas
    contract.storage[22] = block.timestamp

    # Get our last recorded pointer
    last = contract.storage[18]

    # DEBUG
    if msg.value > 0: // "Refunding value: %s" % msg.value
        send(tx.origin, msg.value)

    if status == 1:
        if msg.datasize == 1: // "Getting trade"
            trade = array(5)
            trade[0] = contract.storage[msg.data[0]] // "Buy or sell"
            trade[1] = contract.storage[msg.data[0] + 1] // "Price"
            trade[2] = contract.storage[msg.data[0] + 2] // "Amount"
            trade[3] = contract.storage[msg.data[0] + 3] // "Owner"
            trade[4] = contract.storage[msg.data[0] + 4] // "Market"
            return(trade, 5)

        elif msg.datasize == 6:

            if msg.data[0] == 1: // "Adding trade"
                if msg.sender == exchange:
                    trade = msg.data[1]
                    price = msg.data[2]
                    amount = msg.data[3]
                    owner = msg.data[4]
                    market = msg.data[5]
                    if trade < 1 or trade > 2:
                        return(2) // "Invalid trade type"
                    if price < 1 or price > 2^254:
                        return(3) // "Invalid price"
                    if amount < 1 or amount > 2^254:
                        return(4) // "Invalid amount"
                    if owner < 1 or owner > 2^254:
                        return(5) // "Invalid owner"
                    if market < 1 or market > 2^254: // "TODO - Get and check market count"
                        return(6) // "Invalid market"
                    i = 0
                    while i < 5:
                        contract.storage[last + 100 + i] = msg.data[i + 1]
                        i = i + 1
                    contract.storage[18] = last + 5
                    return(last + 100)

        elif msg.datasize == 2:

            if msg.data[0] == 0: // "Removing trade"
                if msg.sender == exchange:
                    # Clear storage
                    c = 0
                    while c < 5:
                        contract.storage[msg.data[1] + c] = 0
                        c = c + 1

                    return(1)
        return(0)

    elif msg.sender == exchange:

        # NameReg
        call(msg.data[1], msg.data[2])

        # Set contract parent and owner
        contract.storage[14] = msg.data[0] # Set c3D parent
        contract.storage[15] = msg.data[0] // #define msg.data[0]=EX

        # Set contract as active
        contract.storage[1] = 1 // "Initializing storage for sender %s" % msg.data[0]

        return(1)
