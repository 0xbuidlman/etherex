# fab.se -- Ethereum contract
#
# Copyright (c) 2014 EtherEx
#
# This software may be modified and distributed under the terms
# of the MIT license.  See the LICENSE file for details.

#
# FAB
#

init:
    # c3D definitions
    contract.storage[10] = 585546221243 # 0x88554646BB
    contract.storage[15] = msg.sender
    contract.storage[16] = msg.sender
    contract.storage[17] = block.timestamp

code:
    # Basic gas check
    if tx.gas < 1000:
        return(0) // "Insufficient gas"

    # Get our status
    status = contract.storage[1]

    # Get reference to exchange
    exchange = contract.storage[15]

    # Logging
    contract.storage[20] = msg.datasize
    contract.storage[21] = tx.gas
    contract.storage[22] = block.timestamp

    if status == 1: // "Running contract..."

        # Get our inputs
        if msg.sender == exchange:
            sender = msg.data[0]
            to = msg.data[1]
            value = msg.data[2]
        else:
            sender = msg.sender
            to = msg.data[0]
            value = msg.data[1]

            if msg.value > 0: // "Transfering value to XETH: %s" % msg.value
                #
                # Get price and adjust balance
                #
                price = call(exchange, ["price", 0, 1], 3)
                balance = balance + (msg.value / price)
                contract.storage[sender] = balance

        balance = contract.storage[sender] // "Balance of %s: %d" % (sender, balance)

        # Check our inputs for transfers
        # if msg.datasize < 4:
        if to < 100:
            return(2) // "msg.data[0] out of bounds: %s" % to
        if value < 1:
            return(3) // "msg.data[1] out of bounds: %s" % value

        # Check for sufficient funds and adjust balances
        if balance < value:
            return(4) // "Insufficient funds, %s has %d needs %d" % (sender, balance, value)

        elif value > 0: // "Adjusting values by %d" % value
            balance = contract.storage[sender] - value
            contract.storage[sender] = balance
            contract.storage[to] = contract.storage[to] + value

        # Operations
        else:

            # Check balance
            if msg.data[2] == 1:
                ret = contract.storage[to] // "Balance of %s: %s" % (to, ret)
                return(ret)

            # Withdraw
            elif msg.data[2] == 2: // "Withdraw"

                # Get price
                price = call(exchange, ["price", 0, 1], 3)
                amount = value * price

                # Set new balance
                contract.storage[sender] = contract.storage[sender] - amount

                # Send amount
                send(sender, amount)

                return(1)

            # Check ownership
            elif msg.data[2] == 3: // "Checking ownership"
                isowner = 0
                if to == exchange: // "Checking %s against %s" % (to, exchange)
                    isowner = exchange
                return(exchange)

            # Add to balance - TODO - allow balance adjustments?
            elif msg.data[2] == 4 and msg.sender == exchange: // #define 0x45746865724578=EX
                if value < 1 or value > 1 * 10 ^ 18:
                    return(0)
                contract.storage[to] = contract.storage[to] + value // "Adjusting balance by %d" % value

            # Change ownership
            elif msg.data[2] == 5 and msg.sender == exchange:
                contract.storage[15] = msg.data[1]
                return(0) // "Set owner to %s" % msg.data[1]

        return(1)

    elif msg.sender == exchange:

        contract.storage[msg.sender] = msg.value # DEBUG - Sets full value to sender

        n = 3
        owners = array(n)
        owners[0] = 0xb5b8c62dd5a20793b6c562e002e7e0aa68316d31 // #define 0xb5b8c62dd5a20793b6c562e002e7e0aa68316d31=ALICE
        owners[1] = 0xe559de5527492bcb42ec68d07df0742a98ec3f1e // #define 0xe559de5527492bcb42ec68d07df0742a98ec3f1e=BOB
        owners[2] = 0xf9e57456f18d90886263fedd9cc30b27cd959137 // #define 0xf9e57456f18d90886263fedd9cc30b27cd959137=CHARLIE

        # Split endowment between owners
        i = 0
        while i < n:
            contract.storage[owners[i]] = 10 ^ 25 / n # DEBUG
            i = i + 1

        # NameReg
        call(msg.data[1], msg.data[2])

        # Set contract parent and owner
        contract.storage[14] = msg.data[0] # Set c3D parent
        contract.storage[15] = msg.data[0] // #define msg.data[0]=EX

        # Set contract as active
        contract.storage[1] = 1 // "Initializing storage for owners %s" % owners

        return(1)
