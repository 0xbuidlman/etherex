if tx.value < 1000 * block.basefee:
    stop // "Insufficient fee"
status = contract.storage[5000]
if status == 1:
    if tx.datan < 1:
        stop // "No data to process"
    if tx.data[0] < 1 or tx.data[0] > 5:
        stop // "Invalid operation"
    if tx.data[0] < 3:
        if tx.datan < 2:
            stop // "Missing amount"
        if tx.data[1] < 1:
            stop // "Invalid amount"
        if tx.datan < 3:
            stop // "Missing price"
        if tx.data[2] < 1:
            stop // "Invalid price"
        if tx.datan < 4:
            stop // "Missing market ID"
    amount = tx.data[1] // "Trade amount: %d" % amount
    price = tx.data[2] // "Trade price: %d" % price
    if amount > 256^256 or price > 256^256 or tx.data[3] > 1 or tx.datan > 4:
        stop // "Values out of range"
    markets = contract.storage[5002]
    if tx.data[0] > 0 and tx.data[0] < 3:
        mk = tx.data[3] - 1
        market = markets[mk]
        if mk == 0: // "Verifing minimum trade amounts..."
            if tx.data[0] == 1 and amount < market[1]:
                stop // "Minimum BTC trade amount not met, minimum is %s, got %d" % (market[1], amount)
            if tx.data[0] == 2 and tx.value < market[2]:
                stop // "Minimum ETH trade amount not met, minimum is %s, got %d" % (market[2], tx.value)
            if tx.data[0] < 2: // "Trade amounts OK for %s" % market[0]
                tk = 5005
            else:
                tk = 5004
            hk = price + 10000
            book = contract.storage[hk] // "Current price orderbook: %s" % book
            if book == 0:
                book = array(2)
                book[0] = 2
                book[1] = 1
            else:
                book[0] = book[0] + 1
                book[1] = book[1] + 1
            bookadd = array(5)
            bookadd[0] = tx.data[0]
            bookadd[1] = price
            bookadd[2] = amount
            bookadd[3] = tx.sender
            bookadd[4] = mk
            ba = array(1)
            ba[0] = bookadd
            book = book + ba
            contract.storage[hk] = book
            contract.storage[tk] = contract.storage[tk] + amount // "Trade recorded, processing"
            bl = book[0]
            bn = book[1]
            c = 2
            ca = 0
            while c <= bl:
                curbook = book[c]
                if curbook == 0: // "Skipping 1 record"
                    c = c + 1
                elif ca == bn: // "No more trades to check, skipping..."
                    c = bl
                else:
                    if curbook[4] == mk:
                        if tx.data[0] == 1 and curbook[0] == 2: // "Buying..."
                            ia = amount
                            if amount < curbook[2]: // "Buying %d from balance of %d from %s" % (amount, curbook[2], curbook[3])
                                curbook[2] = curbook[2] - amount
                                amount = 0
                            elif amount >= curbook[2]: // "Buying balance of %d from %s" % (curbook[2], curbook[3])
                                amount = amount - curbook[2]
                                bookadd[2] = amount
                                book[c] = bookadd
                                book[1] = bn - 1
                                curbook = 0
                            book[c] = curbook // "Amount left to process: %d" % amount
                            if amount == 0:
                                book[1] = book[1] - 1
                                book[bl] = 0
                                c = bl
                            contract.storage[hk] = book
                            contract.storage[tk] = contract.storage[tk] - (ia - amount)
                        elif tx.data[0] == 2 and curbook[0] == 1: // "Selling..."
                            ia = amount
                            if amount > curbook[2]: // "Selling %d from balance of %d to %s" % (curbook[2], amount, curbook[3])
                                amount = amount - curbook[2]
                                bookadd[2] = amount
                                book[c] = bookadd
                                curbook = 0
                            elif amount <= curbook[2]: // "Selling balance of %d to %s" % (amount, curbook[3])
                                curbook[2] = curbook[2] - amount
                                book[1] = bn - 1
                                amount = 0
                                if curbook[2] == 0:
                                    curbook = 0
                                    book[1] = bn - 1
                            book[c] = curbook // "Amount left to process: %d" % amount
                            if amount == 0:
                                book[1] = book[1] - 1
                                book[bl] = 0
                                c = bl
                            contract.storage[hk] = book
                            contract.storage[tk] = contract.storage[tk] - (ia - amount)
                    c = c + 1
                ca = ca + 1
    elif tx.data[0] == 3: // "DEPOSIT"
        stop // "Not implemented yet"
    elif tx.data[0] == 4: // "WITHDRAW"
        stop // "Not implemented yet"
    elif tx.data[0] == 5: // "CANCEL"
        stop // "Not implemented yet"
    else:
        stop // "Uncaught operation"
    stop // "Execute trades - TODO"
else:
    owners = array(3)
    owners[0] = 0xb5b8c62dd5a20793b6c562e002e7e0aa68316d31 // define 0xb5b8c62dd5a20793b6c562e002e7e0aa68316d31=CAK
    owners[1] = 0xec2be90307254c5540453419282add242c177941 // define 0xec2be90307254c5540453419282add242c177941=EOAR
    owners[2] = 0x4272203a4343e0edf81eff450bd0f305fd2a3965 // define 0x4272203a4343e0edf81eff450bd0f305fd2a3965=FAB
    markets = array(2)
    market = array(3)
    market[0] = "ETH/BTC"
    market[1] = 1 * 10 ^ 7 // "Minimum mBTC trade: %d" % (market[1] / (10 ** 5))
    market[2] = 1 * 10 ^ 21 // "Minimum ETH trade: %d" % (market[2] / (10 ** 21))
    markets[0] = market
    market = array(3)
    market[0] = "ETH/XETH"
    market[1] = 1 * 10 ^ 21 // "Minimum XETH trade: %d" % (market[1] / (10 ** 21))
    market[2] = 1 * 10 ^ 21
    markets[1] = market
    contract.storage[5001] = owners
    contract.storage[5002] = markets
    deposit = ((tx.value / 3) / 10 ** 21)
    contract.storage[5003] = tx.value / 3 // "ETH base funds: %d ETH" % deposit
    contract.storage[5004] = tx.value / 3 // "ETH running funds: %d ETH" % deposit
    contract.storage[5005] = tx.value / 3 // "XETH running funds: %d XETH" % deposit
    contract.storage[5000] = 1
    stop // "EtherEx initialized"
