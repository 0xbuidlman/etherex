# indexes.se -- Ethereum contract
#
# Copyright (c) 2014 EtherEx
#
# This software may be modified and distributed under the terms
# of the MIT license.  See the LICENSE file for details.

#
# Indexes
#

init:
    # c3D definitions
    contract.storage[10] = 585546221227 # 0x88554646AB
    contract.storage[15] = msg.sender
    contract.storage[16] = msg.sender
    contract.storage[17] = block.timestamp

code:
    # Basic gas check
    if tx.gas < 1000:
        return(0) // "Insufficient gas"

    # Get our status
    status = contract.storage[1]

    # Get reference to exchange
    exchange = contract.storage[15]

    # Logging
    contract.storage[20] = msg.datasize
    contract.storage[21] = tx.gas
    contract.storage[22] = block.timestamp

    # Get our last recorded pointer
    last = contract.storage[18]

    if msg.value > 0: // "Refunding excess value: %s" % msg.value
        send(tx.origin, msg.value)

    if status == 1:
        slots = 2
        if msg.datasize == 1: // "Getting indexes"
            if !last:
                last = 100
            if last > 100:
                total = (last - 100) / slots
            else:
                total = 0
            totalslots = total * slots
            indexes = array(totalslots + 1)
            indexes[0] = total
            i = 1
            while i < totalslots + 1:
                indexes[i] = contract.storage[100 + i]
                i = i + 1
            return(indexes, totalslots + 1)
        elif msg.datasize > 1:
            if msg.data[0] == 1:
                if msg.sender == exchange: // "Adding index"
                    i = 0
                    while i < slots:
                        contract.storage[last + 100 + i] = msg.data[i + 1]
                        i = i + 1
                    contract.storage[18] = last + slots
                    return(last)
            if msg.data[0] == 2:
                if msg.sender == exchange: // "Replacing index"
                    if msg.datasize < 4:
                        return(0)
                    contract.storage[msg.data[2] * slots + 100] = msg.data[1]
                    return(msg.data[2])
            elif msg.data[0] == 0:
                if msg.sender == exchange: // "Removing index # %d" % msg.data[1]
                    contract.storage[msg.data[1] * slots + 100] = 0
                    contract.storage[msg.data[1] * slots + 101] = 0
                    return(1)
            # Return... price?
            # if msg.datasize == 2:
            #     last = sha3([msg.data[1], msg.data[2]], 2)
            #     return contract.storage[last]



    elif msg.sender == exchange:

        # NameReg
        call(msg.data[1], msg.data[2])

        # Set contract parent and owner
        contract.storage[14] = msg.data[0] # Set c3D parent
        contract.storage[15] = msg.data[0] // #define msg.data[0]=EX

        # Set contract as active
        contract.storage[1] = 1 // "Initializing storage for sender %s" % msg.data[0]

        return(1)
