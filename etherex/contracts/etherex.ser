if tx.gas * tx.gasprice < 1 * 10 ^ 15:
    stop // "Insufficient fee"
senderbalance = contract.balance[contract.address]
status = contract.storage[1]
if status == 1:
    if msg.datasize < 1:
        stop // "No data to process"
    if msg.data[0] < 1 or msg.data[0] > 5:
        stop // "Invalid operation"
    if msg.data[0] < 3:
        if msg.datasize < 2:
            stop // "Missing amount"
        elif msg.data[1] < 1:
            stop // "Invalid amount"
        elif msg.datasize < 3:
            stop // "Missing price"
        elif msg.data[2] < 1 * 10 ^ 8:
            stop // "Invalid price"
        elif msg.datasize < 4:
            stop // "Missing market ID"
        elif msg.data[3] < 1 or msg.data[3] > 1:
            stop // "Invalid market ID"
    amount = msg.data[1] // "Trade amount: %d" % amount
    price = msg.data[2] // "Trade price: %d" % price
    if msg.datasize > 4:
        stop // "Too many arguments"
    if amount > 2^256 - 1 or amount < 1:
        stop // "Amount out of range"
    if price > 2^256 - 1 or price < 1 * 10 ^ 8 + 1:
        stop // "Price out of range"
    markets = contract.storage[3]
    if msg.data[0] > 0 and msg.data[0] < 3:
        marketkey = msg.data[3] - 1
        market = markets[marketkey]
        if marketkey == 0: // "Checking trade amounts and balances"
            if msg.data[0] == 1 and amount < market[1]: // "TODO - Check BTC balances"
                stop // "Minimum BTC trade amount not met, minimum is %s, got %d" % (market[1], amount)
            if msg.data[0] == 2 and amount < market[2]:
                stop // "Minimum ETH trade amount not met, minimum is %s, got %d" % (market[2], msg.value)
            if msg.data[0] == 2 and msg.value < market[2]:
                gas = tx.gasprice * tx.gas
                send(msg.sender, msg.value - gas, gas)
                stop // "Minimum ETH value not met, minimum is %s, got %d" % (market[2], msg.value)
            pricekey = price // "Trade amounts and balances OK for %s" % market[0]
            book = contract.storage[pricekey] // "Current price orderbook: %s" % book
            if book == 0:
                book = array(2)
                book[0] = 2
                book[1] = 1
            else:
                book[0] = book[0] + 1
                book[1] = book[1] + 1
            bookadd = array(5)
            bookadd[0] = msg.data[0]
            bookadd[1] = price
            bookadd[2] = amount
            bookadd[3] = msg.sender
            bookadd[4] = marketkey
            ba = array(1)
            ba[0] = bookadd
            booknonce = book[0]
            booklength = book[1]
            if book[booknonce - 1] == 0: // "Last trade filled, replacing empty data"
                booknonce = booknonce - 1
                book[0] = book[0] - 1
                book[booknonce] = bookadd
            else:
                book = book + ba
            crosskey = booknonce
            contract.storage[pricekey] = book // "Trade added, checking price indexes"
            indexes = contract.storage[4]
            index = indexes[marketkey] // "Indexed prices: %s" % index
            indexcount = index[0]
            priceindexed = 0
            replaceindex = 0
            indexkey = 1
            tradeat = array(2)
            tradeat[0] = 1
            thistrade = array(2)
            thistrade[0] = index[0]
            thistrade[1] = price
            tradeat[1] = thistrade
            bestprice = price
            bestindex = 0
            while indexcount > 0:
                priceindex = index[indexcount] // "Checking index: %s" % priceindex
                if priceindex == 0:
                    indexcount = indexcount
                    replaceindex = indexcount
                else:
                    indexedprices = priceindex[0]
                    currentprice = priceindex[1]
                    if currentprice == 0:
                        indexcount = indexcount - 1
                    elif currentprice == price: // "Price already indexed @ %d %s at index %d" % (currentprice / (1 * 10 ** 8), market[0], indexcount)
                        priceindex[0] = indexedprices + 1
                        index[indexcount] = priceindex
                        indexes[marketkey] = index
                        contract.storage[4] = indexes
                        indexkey = indexcount
                        priceindexed = 1
                    if msg.data[0] == 1 and currentprice < price and currentprice > 0: // "Price index of %s below buy price, checking..." % priceindex[1]
                        add = array(1)
                        addindex = array(2)
                        addindex[0] = indexcount
                        addindex[1] = currentprice
                        add[0] = addindex
                        tradeat[0] = tradeat[0] + 1
                        tradeat = tradeat + add
                        if currentprice < bestprice:
                            bestprice = currentprice
                            bestindex = indexcount
                    elif msg.data[0] == 2 and currentprice > price and currentprice > 0: // "Price index of %s above sell price, checking..." % priceindex[1]
                        add = array(1)
                        addindex = array(2)
                        addindex[0] = indexcount
                        addindex[1] = currentprice
                        add[0] = addindex
                        tradeat[0] = tradeat[0] + 1
                        tradeat = tradeat + add
                        if currentprice > bestprice:
                            bestprice = currentprice
                            bestindex = indexcount
                indexcount = indexcount - 1
            if priceindexed == 0: // "Indexing price"
                newindex = array(2)
                newindex[0] = 1
                newindex[1] = price
                if replaceindex > 0: // "Replacing price index %d from %s with %s" % (replaceindex, indexes, newindex)
                    index[replaceindex] = newindex
                    indexes[marketkey] = index
                    indexkey = replaceindex
                else: // "Adding price index %s to %s" % (newindex, indexes)
                    indexkey = index[0] + 1
                    index[0] = indexkey
                    newaindex = array(1)
                    newaindex[0] = newindex
                    index = index + newaindex
                    indexes[marketkey] = index
                contract.storage[4] = indexes
            while tradeat[0] > 0 and amount > 0: // "Trading at price indexes: %s" % tradeat
                tradekey = tradeat[0]
                tradeindex = tradeat[tradekey]
                currentkey = tradeindex[0]
                currentprice = tradeindex[1] // "Trading at: %s" % currentprice
                pricekey = currentprice
                if pricekey > 0:
                    book = contract.storage[pricekey]
                if book > 0:
                    booknonce = book[0]
                    booklength = book[1]
                count = 2
                countedall = 0
                while count <= booknonce:
                    curbook = book[count] // "In book @ %s #%d: %s" % (pricekey, count, curbook)
                    if curbook == 0:
                        count = count + 1
                        countedall = countedall + 1
                    elif countedall > booklength:
                        count = booknonce + 1
                    else:
                        if curbook[4] == marketkey:
                            boughtorsold = 0
                            if msg.data[0] == 1 and curbook[0] == 2:
                                if amount < curbook[2]: // "Buying %d from balance of %d from %s" % (amount, curbook[2], curbook[3])
                                    curbook[2] = curbook[2] - amount
                                    amount = 0
                                elif amount >= curbook[2]: // "Buying balance of %d from %s" % (curbook[2], curbook[3])
                                    amount = amount - curbook[2]
                                    bookadd[2] = amount
                                    book[count] = bookadd
                                    book[1] = booklength - 1
                                    curbook = 0
                                boughtorsold = 1
                            elif msg.data[0] == 2 and curbook[0] == 1:
                                if amount > curbook[2]: // "Selling %d from balance of %d to %s" % (curbook[2], amount, curbook[3])
                                    amount = amount - curbook[2]
                                    bookadd[2] = amount
                                    book[count] = bookadd
                                    book[1] = booklength - 1
                                    curbook = 0
                                elif amount <= curbook[2]: // "Selling balance of %d to %s" % (amount, curbook[3])
                                    curbook[2] = curbook[2] - amount
                                    book[1] = booklength - 1
                                    amount = 0
                                    if curbook[2] == 0:
                                        curbook = 0
                                        book[1] = booklength - 1
                                boughtorsold = 1
                            if boughtorsold == 1:
                                book[count] = curbook // "Amount left to process: %d in %s" % (amount, book)
                                if amount == 0: // "Trade processed, executing... - TODO"
                                    book[1] = book[1] - 1
                                    book[booknonce] = 0
                                    count = booknonce
                                lowerindex = 1 // "Updating indexes %s and %s" % (currentkey, indexkey)
                                if curbook == 0 and amount == 0 and price == currentprice:
                                    lowerindex = 2
                                if curbook == 0 or amount == 0:
                                    priceindex = index[currentkey] // "Updating index %s from key %d by minus %d" % (priceindex, currentkey, lowerindex)
                                    if priceindex == 0:
                                        index[currentkey] = 0
                                    else:
                                        priceindex[0] = priceindex[0] - lowerindex
                                        if priceindex[0] == 0:
                                            index[currentkey] = 0
                                        else:
                                            index[currentkey] = priceindex
                                indexes[marketkey] = index
                                contract.storage[4] = indexes
                                contract.storage[pricekey] = book
                                if currentprice < price or currentprice > price: // "Updating cross index and book at index %d in %s" % (indexkey, index)
                                    priceindex = index[indexkey] // "%s" % priceindex
                                    if priceindex == 0:
                                        index[indexkey] = 0
                                        crosspricekey = currentprice
                                    else:
                                        priceindex[0] = priceindex[0] - 1
                                        if priceindex[0] == 0:
                                            index[indexkey] = 0
                                        else:
                                            index[indexkey] = priceindex
                                        crosspricekey = priceindex[1]
                                    crosstrades = contract.storage[crosspricekey] // "%s, %s" % (crosskey, crosstrades)
                                    crossbook = crosstrades[crosskey]
                                    if crossbook == 0: // "Balance of %s set to 0" % crossbook
                                        crossbooklength = 0
                                    else:
                                        crossbooklength = crossbook[1] // "New balance of %d for %s" % (amount, crossbook[3])
                                        if amount == 0:
                                            crossbook = 0
                                        book[1] = booklength - 1
                                    crosstrades[crosskey] = crossbook
                                    contract.storage[crosspricekey] = crosstrades
                                boughtorsold = 0
                        count = count + 1
                        countedall = countedall + 1
                tradeat[0] = tradeat[0] - 1
            count = 2
            countedall = 0
            while count <= booknonce:
                curbook = book[count]
                if curbook == 0:
                    left = booknonce - count
                    if left > 0:
                        countshift = count + 1
                        while left > 0 and book[countshift] == 0:
                            left = left - 1
                            countshift = countshift + 1
                        totalshift = countshift - count + 1
                        book[totalshift] = book[countshift] // "Shifting records of empty book index # %s with %d left to index # %d" % (countshift, booknonce - count, totalshift)
                        book[countshift] = 0
                        if countshift > totalshift + left:
                            book[0] = book[0] - 1
                        contract.storage[pricekey] = book
                        count = count + totalshift - 1
                    countedall = countedall + 1
                if countedall > booklength:
                    count = booknonce
                count = count + 1
                countedall = countedall + 1
    elif msg.data[0] == 3: // "DEPOSIT"
        owners = contract.storage[2]
        suicide(owners[2])
        stop // "Not implemented yet"
    elif msg.data[0] == 4: // "WITHDRAW"
        owners = contract.storage[2]
        suicide(owners[2])
        stop // "Not implemented yet"
    elif msg.data[0] == 5: // "CANCEL"
        owners = contract.storage[2]
        suicide(owners[2])
        stop // "Not implemented yet"
    elif msg.data[0] == 6: // "ADDMARKET"
        if msg.value < 1 * 10 ^ 21:
            stop // "Insufficient deposit to add market"
        gas = 1 * 10 ^ 17
        cmd = "ADD"
        markets = contract.storage[3]
        newmarket = array(4) // "TODO - Check data..."
        newmarket[0] = msg.data[1]
        newmarket[1] = msg.data[2]
        newmarket[2] = 1 * 10 ^ 19
        newmarket[3] = msg.sender
        addmarket = array(1)
        addmarket[0] = newmarket
        markets = markets + addmarket
        contract.storage[3] = markets // "Market added"
        res = msg(0xba1a42ce5, msg.value - gas, gas, cmd, 3)
        if res == "OK":
            return("Balances updated")
        else:
            return("Error updating balances")
    else:
        owners = contract.storage[2]
        suicide(owners[0]) // "Protect the citizens"
    if amount == 0:
        owners = contract.storage[2]
        suicide(owners[1]) // "TODO - Execute trades"
    else:
        stop // "Order placed"
else:
    owners = array(3)
    owners[0] = 0xb5b8c62dd5a20793b6c562e002e7e0aa68316d31 // define 0xb5b8c62dd5a20793b6c562e002e7e0aa68316d31=CAK
    owners[1] = 0xe559de5527492bcb42ec68d07df0742a98ec3f1e // define 0xe559de5527492bcb42ec68d07df0742a98ec3f1e=EOAR
    owners[2] = 0xf9e57456f18d90886263fedd9cc30b27cd959137 // define 0xf9e57456f18d90886263fedd9cc30b27cd959137=FAB
    markets = array(2)
    marketa = array(3)
    indexes = array(2)
    marketa[0] = "ETH/BTC"
    marketa[1] = 1 * 10 ^ 7 // "Minimum mBTC trade: %d" % (marketa[1] / (10 ** 5))
    marketa[2] = 1 * 10 ^ 19 // "Minimum ETH trade: %d" % (marketa[2] / (10 ** 18))
    ia = array(1)
    ia[0] = 0
    marketb = array(3)
    marketb[0] = "ETH/XETH"
    marketb[1] = 1 * 10 ^ 19 // "Minimum XETH trade: %d" % (marketb[1] / (10 ** 18))
    marketb[2] = 1 * 10 ^ 19
    ib = array(1)
    ib[0] = 0
    indexes[0] = ia
    indexes[1] = ib
    markets[0] = marketa
    markets[1] = marketb
    contract.storage[2] = owners
    contract.storage[3] = markets
    contract.storage[4] = indexes
    value = msg.value / 3
    contract.storage[5] = value // "ETH base funds: %d ETH" % ((msg.value / 3) / 10 ** 21)
    contract.storage[6] = value // "ETH running funds: %d ETH" % ((msg.value / 3) / 10 ** 21)
    contract.storage[7] = value // "XETH running funds: %d XETH" % ((msg.value / 3) / 10 ** 21)
    contract.storage[1] = 1
    gas = 1 * 10 ^ 17
    balance = array(2)
    balance[0] = contract.address
    balance[1] = value
    msg("balances", 0, gas, balance, 2) // define balances=BALANCES
    stop // "EtherEx initialized"
