# currencies.se -- Ethereum contract
#
# Copyright (c) 2014 EtherEx
#
# This software may be modified and distributed under the terms
# of the MIT license.  See the LICENSE file for details.

#
# Currencies (Markets)
#

init:
    # c3D definitions
    contract.storage[10] = 0x88554646ab # 0x88554646AB
    contract.storage[15] = msg.sender
    contract.storage[16] = msg.sender
    contract.storage[17] = block.timestamp

code:
    # Basic gas check
    if tx.gas < 1000:
        return(0) // "Insufficient gas"

    # Get our status
    status = contract.storage[1]

    # Get reference to exchange
    exchange = contract.storage[15]

    # Logging
    contract.storage[20] = msg.datasize
    contract.storage[21] = tx.gas
    contract.storage[22] = ret
    contract.storage[22] = block.timestamp

    # Get our last recorded pointer
    last = contract.storage[18]

    if msg.value > 0: // "Refunding excess value: %s" % msg.value
        send(msg.sender, msg.value)

    if status == 1:
        if msg.datasize == 1: // "Getting market"
            marketid = msg.data[0] - 1
            market = array(5)
            market[0] = contract.storage[marketid * 5 + 100] // "Name"
            market[1] = contract.storage[marketid * 5 + 101] // "Minimum amount"
            market[2] = contract.storage[marketid * 5 + 102] // "Price precision"
            market[3] = contract.storage[marketid * 5 + 103] // "Contract"
            market[4] = contract.storage[marketid * 5 + 104] // "Last price"
            return(market, 5)

        elif msg.datasize == 5:
            if msg.data[0] == 1:
                if msg.sender == exchange: // "Adding market"
                    contract.storage[8] = msg.data[0]
                    name = msg.data[1]
                    amount = msg.data[2]
                    price = msg.data[3]
                    owner = msg.data[4]
                    market = (last / 5) + 1
                    contract.storage[9] = market
                    if amount < 1 or amount > 2^254:
                        return(0) // "Invalid minimum amount"
                    if price < 1 or price > 2^254:
                        return(0) // "Invalid price"
                    if owner < 1 or owner > 2^254:
                        return(0) // "Invalid owner"
                    if market < 1 or market > 2^254:
                        return(0) // "Invalid market ID"
                    i = 0
                    while i < 5:
                        if i < 4:
                            contract.storage[last + 100 + i] = msg.data[i + 1]
                        else:
                            contract.storage[last + 100 + i] = market
                        i = i + 1
                    last = last + 5
                    contract.storage[18] = last
                    return(market)

            elif msg.data[0] == 0: // "Removing market"
                if msg.sender == exchange:
                    total = (last - 100) / 5
                    i = 0
                    markets = array(1)
                    markets[0] = 0
                    ret = 0
                    while i < total:
                        owner = contract.storage[i * 5 + 103] // "Check by contract"
                        if owner == msg.data[4]:
                            trade = contract.storage[i * 5 + 100]
                            price = contract.storage[i * 5 + 101]
                            amount = contract.storage[i * 5 + 102]
                            market = contract.storage[i * 5 + 104]
                            if trade == msg.data[1] and price == msg.data[2] and amount == msg.data[3] and market == msg.data[5]:
                                c = 0
                                while c < 5:
                                    contract.storage[i * 5 + 100 + c] = 0
                                    c = c + 1
                                markets[0] = markets[0] - 1
                                ret = 1
                        i = i + 1
                    return(ret)
                return(0)
        return(ret)

    elif msg.sender == exchange:

        # NameReg
        call(msg.data[1], msg.data[2])

        # Set contract parent and owner
        contract.storage[14] = msg.data[0] # Set c3D parent
        contract.storage[15] = msg.data[0] // #define msg.data[0]=EX

        # Set contract as active
        contract.storage[1] = 1 // "Initializing storage for sender %s" % msg.data[0]

        return(1)
