From 2abcd309106fd70c629c3669f81881c6b34b5e9b Mon Sep 17 00:00:00 2001
From: Joshua Mir <joshuam10o@gmail.com>
Date: Sat, 8 Feb 2014 16:57:29 +0000
Subject: [PATCH] Merged bugfixes from pyethereum/compiler

---
 cllcompiler.py |  6 +++---
 cllparser.py   |  6 +++---
 runtests.py    | 10 +++++-----
 3 files changed, 11 insertions(+), 11 deletions(-)

diff --git a/cllcompiler.py b/cllcompiler.py
index 3d7fa4b..b60f0d4 100644
--- a/cllcompiler.py
+++ b/cllcompiler.py
@@ -197,12 +197,12 @@ def assemble(c):
 def compile(source):
     lines = source.split('\n')
     p = parse_lines(lines)
-    print p
+    print (p)
     return assemble(compile_stmt(p))
 
 if len(sys.argv) >= 2:
     try:
         open(sys.argv[1]).read()
-        print ' '.join([str(k) for k in compile(open(sys.argv[1]).read())])
+        print (' '.join([str(k) for k in compile(open(sys.argv[1]).read())]))
     except:
-        print ' '.join([str(k) for k in compile(sys.argv[1])])
+        print (' '.join([str(k) for k in compile(sys.argv[1])]))
diff --git a/cllparser.py b/cllparser.py
index 627135e..9d1e841 100644
--- a/cllparser.py
+++ b/cllparser.py
@@ -27,7 +27,7 @@ def parse_lines(lns):
             if sp == 0: break
             spacesmin = min(sp,spacesmin)
             i += 1
-        child_block = map(lambda x:x[spacesmin:],lns[start_child_block:i])
+        child_block = list(map(lambda x:x[spacesmin:],lns[start_child_block:i]))
         # Calls parse_line to parse the individual line
         out = parse_line(main)
         # Include the child block into the parsed expression
@@ -154,7 +154,7 @@ def popstack(stack,oq):
             elif tok == ')' and len(args) and args[0] != 'id':
                 oq.append(['fun'] + args)
             else:
-                oq.append(args[1])
+                oq.append(args[0])
     # The main loop
     while len(iq) > 0:
         prev = tok
@@ -184,7 +184,7 @@ def popstack(stack,oq):
             stack.append(tok)
         elif typ == 'comma':
             while len(stack) and stack[-1] != 'lparen': popstack(stack,oq)
-        #print 'iq',iq,'stack',stack,'oq',oq
+        #print ('iq',iq,'stack',stack,'oq',oq)
     while len(stack):
         popstack(stack,oq)
     if len(oq) == 1:
diff --git a/runtests.py b/runtests.py
index 864ede0..c3f9490 100644
--- a/runtests.py
+++ b/runtests.py
@@ -7,13 +7,13 @@
         o.append(t[i])
         i += 1
     i += 1
-    print '================='
+    print ('=================')
     text = '\n'.join(o).replace('\n\n','\n')
-    print text
+    print (text)
     ast = cllcompiler.parse_lines(o)
-    print "AST:",ast
-    print ""
+    print ("AST:",ast)
+    print ("")
     code = cllcompiler.assemble(cllcompiler.compile_stmt(ast))
-    print "Output:",' '.join([str(x) for x in code])
+    print ("Output:",' '.join([str(x) for x in code]))
     if i >= len(t):
         break
-- 
1.8.5.5


