diff --git a/cllcompiler.py b/cllcompiler.py
index d036030..7be27cc 100644
--- a/cllcompiler.py
+++ b/cllcompiler.py
@@ -55,6 +55,8 @@ def get_left_expr_type(expr):
         return 'variable'
     elif expr[0] == 'access' and expr[1] == 'contract.storage':
         return 'storage'
+    elif expr[0] == 'access' and expr[1] == 'block.address_balance':
+        return 'storage'
     else:
         return 'access'
 
@@ -71,7 +73,9 @@ def compile_left_expr(expr,varhash):
     elif typ == 'storage':
         return compile_expr(expr[2],varhash)
     elif typ == 'access':
-        if get_left_expr_type(expr[1]) == 'storage':
+        if get_left_expr_type(expr[1]) == 'storage' and expr[1] == 'block.address_balance':
+            return compile_left_expr(expr[1],varhash) + 'BALANCE' + compile_expr(expr[2],varhash)
+        elif get_left_expr_type(expr[1]) == 'storage':
             return compile_left_expr(expr[1],varhash) + 'SLOAD' + compile_expr(expr[2],varhash)
         else:
             return compile_left_expr(expr[1],varhash) + compile_expr(expr[2],varhash) + ['ADD']
@@ -104,6 +108,8 @@ def compile_expr(expr,varhash):
     elif expr[0] == 'access':
         if expr[1][0] == 'block.contract_storage':
             return compile_expr(expr[2],varhash) + compile_expr(expr[1][1],varhash) + ['EXTRO']
+        elif expr[1] == 'block.address_balance':
+            return compile_expr(expr[2],varhash) + ['BALANCE']
         elif expr[1] == 'contract.storage':
             return compile_expr(expr[2],varhash) + ['SLOAD']
         elif expr[1] == 'tx.data':
diff --git a/cllparser.py b/cllparser.py
index 627135e..116965a 100644
--- a/cllparser.py
+++ b/cllparser.py
@@ -60,7 +60,7 @@ def parse_lines(lns):
 # Converts something like "b[4] = x+2 > y*-3" to
 # [ 'b', '[', '4', ']', '=', 'x', '+', '2', '>', 'y', '*', '-', '3' ]
 def chartype(c):
-    if c in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.':
+    if c in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789._':
         return 'alphanum'
     elif c in '\t ': return 'space'
     elif c in '()[]': return 'brack'
@@ -122,7 +122,7 @@ def toktype(token):
     elif token in ['!']: return 'monop' 
     elif not isinstance(token,str): return 'compound'
     elif token in precedence: return 'op'
-    elif re.match('^[0-9a-z\-\.]*$',token): return 'alphanum'
+    elif re.match('^[0-9a-z_\-\.]*$',token): return 'alphanum'
     else: raise Exception("Invalid token: "+token)
 
 # https://en.wikipedia.org/wiki/Shunting-yard_algorithm
